// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  phone      String?   @unique
  addresses  Address[]
  orders     Order[]
  cart       Cart?
  reviews    Review[]
 wishlist  Wishlist?  @relation(fields: [wishlistId], references: [id])
  wishlistId String? // Field to store reference to the Wishlist model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique // Make userId unique so one user can have one wishlist
  products  Product[] @relation("WishlistProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  User User[]
}

model Product {
  id               String         @id @default(uuid())
  name             String
  description      String
  actualPrice      Decimal
  discountedPrice  Decimal
  material         Material
  size             String?
  countryOrigin    String
  careInstructions String?
  manufacturedBy   String
  sku              String         @unique
  tags             String[]
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images           ProductImage[]
  reviews          Review[]
  cartItems        CartItem[]
   wishlists        Wishlist[]    @relation("WishlistProducts")


  orderItems       OrderItem[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ProductImage {
  id        String  @id @default(uuid())
  imageUrl  String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Material {
  GOLD
  SILVER
  DIAMOND
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPrice Decimal
  status     OrderStatus @default(PENDING)
  orderItems OrderItem[]

  payment   Payment?
  shipping  Shipping?
  createdAt DateTime  @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Decimal
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Decimal
  method    PaymentMethod
  status    PaymentStatus
  createdAt DateTime      @default(now())
}

model Shipping {
  id             String         @id @default(uuid())
  orderId        String         @unique
  
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  name           String
  phone          String
  addressId      String
  address        Address        @relation(fields: [addressId], references: [id])
  status         ShippingStatus @default(PENDING)
  trackingNumber String?        
  shippingNotes  String?        
  createdAt      DateTime       @default(now())
}


model Address {
  id         String @id @default(uuid())
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    String
  city       String
  state      String
  postalCode String
  country    String

  Shipping Shipping[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  DEBIT_CARD
  UPI
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ShippingStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
}
